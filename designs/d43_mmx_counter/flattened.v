/* Generated by Yosys 0.25+83 (git sha1 755b753e1, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

/* top =  1  */
/* src = "d43_mmx_counter/src/wrapper.v:2.9-13.18" */
module d43_mmx_counter(io_in, io_out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  /* force_downto = 32'd1 */
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:20.24-20.38|/Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v:270.23-270.24" */
  wire [6:0] _07_;
  /* force_downto = 32'd1 */
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:20.24-20.38|/Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v:270.26-270.27" */
  wire [6:0] _08_;
  /* src = "d43_mmx_counter/src/wrapper.v:3.26-3.31" */
  input [13:0] io_in;
  wire [13:0] io_in;
  /* src = "d43_mmx_counter/src/wrapper.v:4.27-4.33" */
  output [13:0] io_out;
  wire [13:0] io_out;
  /* hdlname = "mchip clk" */
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:8.10-8.13" */
  wire \mchip.clk ;
  /* hdlname = "mchip counter" */
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:10.15-10.22" */
  reg [6:0] \mchip.counter ;
  /* hdlname = "mchip io_in" */
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:4.15-4.20" */
  /* unused_bits = "2 3 4 5 6 7" */
  wire [7:0] \mchip.io_in ;
  /* hdlname = "mchip io_out" */
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:5.16-5.22" */
  wire [7:0] \mchip.io_out ;
  /* hdlname = "mchip reset" */
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:9.10-9.15" */
  wire \mchip.reset ;
  assign _07_[0] = ~\mchip.counter [0];
  assign _08_[1] = \mchip.counter [1] ^ \mchip.counter [0];
  assign _00_ = \mchip.counter [1] & \mchip.counter [0];
  assign _08_[2] = _00_ ^ \mchip.counter [2];
  assign _01_ = _00_ & \mchip.counter [2];
  assign _08_[3] = _01_ ^ \mchip.counter [3];
  assign _02_ = ~(\mchip.counter [3] & \mchip.counter [2]);
  assign _03_ = _00_ & ~(_02_);
  assign _08_[4] = _03_ ^ \mchip.counter [4];
  assign _04_ = _03_ & \mchip.counter [4];
  assign _08_[5] = _04_ ^ \mchip.counter [5];
  assign _05_ = ~(\mchip.counter [5] & \mchip.counter [4]);
  assign _06_ = _03_ & ~(_05_);
  assign _08_[6] = _06_ ^ \mchip.counter [6];
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:13.5-22.8" */
  always @(posedge io_in[12])
    if (io_in[1]) \mchip.counter [0] <= 1'h0;
    else \mchip.counter [0] <= _07_[0];
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:13.5-22.8" */
  always @(posedge io_in[12])
    if (io_in[1]) \mchip.counter [1] <= 1'h0;
    else \mchip.counter [1] <= _08_[1];
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:13.5-22.8" */
  always @(posedge io_in[12])
    if (io_in[1]) \mchip.counter [2] <= 1'h0;
    else \mchip.counter [2] <= _08_[2];
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:13.5-22.8" */
  always @(posedge io_in[12])
    if (io_in[1]) \mchip.counter [3] <= 1'h0;
    else \mchip.counter [3] <= _08_[3];
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:13.5-22.8" */
  always @(posedge io_in[12])
    if (io_in[1]) \mchip.counter [4] <= 1'h0;
    else \mchip.counter [4] <= _08_[4];
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:13.5-22.8" */
  always @(posedge io_in[12])
    if (io_in[1]) \mchip.counter [5] <= 1'h0;
    else \mchip.counter [5] <= _08_[5];
  /* src = "d43_mmx_counter/src/wrapper.v:8.22-11.14|d43_mmx_counter/src/chip.v:13.5-22.8" */
  always @(posedge io_in[12])
    if (io_in[1]) \mchip.counter [6] <= 1'h0;
    else \mchip.counter [6] <= _08_[6];
  assign _07_[6:1] = \mchip.counter [6:1];
  assign _08_[0] = _07_[0];
  assign io_out = { 7'h00, \mchip.counter  };
  assign \mchip.clk  = io_in[12];
  assign \mchip.io_in  = { io_in[7:1], io_in[12] };
  assign \mchip.io_out  = { 1'h0, \mchip.counter  };
  assign \mchip.reset  = io_in[1];
endmodule
